//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Input Action/Input Control.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputControl: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputControl()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Input Control"",
    ""maps"": [
        {
            ""name"": ""Input Player 1"",
            ""id"": ""e2b9b3f5-245d-4100-8344-292ea36e7395"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""388d81ce-db95-41c0-a2fb-a192206b4e27"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Garbage Store"",
                    ""type"": ""Button"",
                    ""id"": ""d00c6259-4f03-44f9-aeb1-587ce289e2c2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact Tap"",
                    ""type"": ""Button"",
                    ""id"": ""13f866bb-7131-45c2-b44e-a38c147a99a0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact Hold"",
                    ""type"": ""Button"",
                    ""id"": ""da185e95-fb85-4a38-8459-f7b358533323"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Give Health"",
                    ""type"": ""Button"",
                    ""id"": ""4439dbc1-55e2-4bdc-a1e2-caa9f7e1ad65"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Brake"",
                    ""type"": ""Button"",
                    ""id"": ""a9a444fa-beb5-47e7-a00f-295983c6397f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Basic Skill Dash"",
                    ""type"": ""Button"",
                    ""id"": ""008bd728-9221-4d3a-8ab1-845449e9e387"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Special Skill Pull Up"",
                    ""type"": ""Button"",
                    ""id"": ""250bb9b5-4e5e-4e86-a2fc-4c8982f1f65f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""f82f6446-4584-4b33-a286-b79946e7c988"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""27b01e69-bee4-4005-9574-fe1e58d176c7"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard Scheme"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""dbb431f0-3671-45f6-8a8b-dbd23dfd7130"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard Scheme"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""0c123479-a37f-44a9-940f-9a0c52751630"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard Scheme"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""7f913523-7558-4e09-850a-1d0ade322d6b"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard Scheme"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrow Key"",
                    ""id"": ""3ea6fcf0-e34e-485d-b408-fb517f7f7883"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""7b7208e8-34a8-491c-9a42-7996641046ef"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard Scheme"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""90209b50-5610-4943-9c74-6bffd6c1c9e3"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard Scheme"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""fe508241-6cb7-43b5-af65-a47eab40ea73"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard Scheme"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""966dd2bc-68aa-42b3-9c3b-0f219b70756e"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard Scheme"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""8f897e8f-0d7e-4f6b-ab30-54bf62a0259c"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": ""Hold(duration=1)"",
                    ""processors"": """",
                    ""groups"": ""Keyboard Scheme"",
                    ""action"": ""Give Health"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8a5e7c01-edf9-4278-af5d-fee1fa3bd93c"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard Scheme"",
                    ""action"": ""Basic Skill Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""57a36c9f-c2e5-4571-ae99-8f98d8572842"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact Hold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8ed3dd44-ee5f-4a89-83bd-d1ac18dfae2a"",
                    ""path"": """",
                    ""interactions"": ""MultiTap(tapCount=3)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact Tap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b774218d-1c96-410e-8efd-5cb3699e0c23"",
                    ""path"": ""<Keyboard>/g"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard Scheme"",
                    ""action"": ""Special Skill Pull Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e1955c86-45ea-4472-94d1-c65d0cbbc2c3"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard Scheme"",
                    ""action"": ""Garbage Store"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2c2e3ea9-b5e6-4bb8-84c1-f7dffc0e8953"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard Scheme"",
                    ""action"": ""Brake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Input Player 2"",
            ""id"": ""44d51ae9-0571-42e3-95c3-3a870f5ea4bb"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""0c6bd544-d51d-4d15-9a8a-698487d219cb"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Garbage Store"",
                    ""type"": ""Button"",
                    ""id"": ""ad4d6e57-d202-4205-a368-a4255c91da3f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact Tap"",
                    ""type"": ""Button"",
                    ""id"": ""7e9757a9-c4fb-4ff6-b915-79e9d9e8ca7a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact Hold"",
                    ""type"": ""Button"",
                    ""id"": ""0ef49c3e-5618-428d-a2b8-6f821fba5ba2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Give Health"",
                    ""type"": ""Button"",
                    ""id"": ""7da49372-5dfe-43b4-84e2-4bbc8ec74f8f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Brake"",
                    ""type"": ""Button"",
                    ""id"": ""c473713c-8497-4e8c-99a7-835e0d925607"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Basic Skill Dash"",
                    ""type"": ""Button"",
                    ""id"": ""52f730c5-86c0-4178-86ef-38534a3e8046"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Special Skill Shield"",
                    ""type"": ""Button"",
                    ""id"": ""4af3bff8-8a64-4d2f-9bd0-9ea63d615ebb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""33feafd7-b67f-42bd-a9a7-ecb707b99b20"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad Scheme"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""100370a0-11bd-41ad-997d-95854f7d601e"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad Scheme"",
                    ""action"": ""Basic Skill Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""846f97de-fb7b-417d-8cd4-c10570c76305"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad Scheme"",
                    ""action"": ""Interact Hold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""78d08b0f-d2f5-4f51-8a68-ae5bc40f6123"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad Scheme"",
                    ""action"": ""Special Skill Shield"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f79acedc-2964-4044-9339-366ad1170018"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": ""Hold(duration=1)"",
                    ""processors"": """",
                    ""groups"": ""Gamepad Scheme"",
                    ""action"": ""Give Health"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7d6c5153-cb0e-42fb-8477-94aa3ff390cb"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad Scheme"",
                    ""action"": ""Brake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9c242eb3-6fb0-4342-b54d-bd658226a76a"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad Scheme"",
                    ""action"": ""Garbage Store"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fad1625f-8865-462d-9df5-83242fd08559"",
                    ""path"": """",
                    ""interactions"": ""MultiTap(tapCount=3)"",
                    ""processors"": """",
                    ""groups"": ""Gamepad Scheme"",
                    ""action"": ""Interact Tap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Main Menu"",
            ""id"": ""24337b30-d557-4f1b-ba02-7ad6fb29aead"",
            ""actions"": [
                {
                    ""name"": ""Navigation Up"",
                    ""type"": ""Button"",
                    ""id"": ""43265e41-01aa-4b34-a092-5202c14d27a1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Navigation Down"",
                    ""type"": ""Button"",
                    ""id"": ""4cd2eac3-fae4-46e3-96a6-b34d0a37c2c7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Navigation Confirm"",
                    ""type"": ""Button"",
                    ""id"": ""4b974cd3-af8d-4bf8-bece-161f8dd98bda"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""72687501-6554-4395-8b35-65c806f61032"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad Scheme"",
                    ""action"": ""Navigation Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8e9734f8-dd65-42bd-bd9f-b6e16326e0e3"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard Scheme"",
                    ""action"": ""Navigation Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""13a4ddc7-4488-438a-a405-6fe4169942d6"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard Scheme"",
                    ""action"": ""Navigation Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""980faf86-e141-4f88-8a4c-62b7fb669717"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad Scheme"",
                    ""action"": ""Navigation Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9fbe39d0-14d0-44a4-af5c-4ab421559d07"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard Scheme"",
                    ""action"": ""Navigation Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1e643ccd-1db8-4a00-a264-90eb7b1271b6"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard Scheme"",
                    ""action"": ""Navigation Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4b35cb2f-3450-4936-93c9-73852a03c037"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard Scheme"",
                    ""action"": ""Navigation Confirm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""54357fcc-0ef8-4ec0-9189-9e9b420d072f"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad Scheme"",
                    ""action"": ""Navigation Confirm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Select Level"",
            ""id"": ""c079e658-fee0-4ee4-b317-255f0ce9e3f7"",
            ""actions"": [
                {
                    ""name"": ""Navigation Left"",
                    ""type"": ""Button"",
                    ""id"": ""1085420b-118a-4003-9c06-4517ecc1908e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Navigation RIght"",
                    ""type"": ""Button"",
                    ""id"": ""79e240e4-1aed-4a7f-b8b3-1074d1a82d7b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Navigation Confirm"",
                    ""type"": ""Button"",
                    ""id"": ""7df178a9-3366-44b1-89a1-3f8cde080d5b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""cc37af7d-a41e-4573-8f89-32b2ae8b1edc"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad Scheme"",
                    ""action"": ""Navigation Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e0cc2b44-a217-4b78-ad1a-2ae348caabf0"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard Scheme"",
                    ""action"": ""Navigation Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""35cbd859-3730-40f1-acf3-ba489250553c"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad Scheme"",
                    ""action"": ""Navigation RIght"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d485cf13-3386-4ac1-8f98-cfa60af25c51"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard Scheme"",
                    ""action"": ""Navigation RIght"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4b3a7781-1c5c-4725-a40c-b5dcdaee12a7"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard Scheme"",
                    ""action"": ""Navigation Confirm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b38ed59c-78e1-436f-b07f-e140fa887250"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad Scheme"",
                    ""action"": ""Navigation Confirm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard Scheme"",
            ""bindingGroup"": ""Keyboard Scheme"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad Scheme"",
            ""bindingGroup"": ""Gamepad Scheme"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""New control scheme"",
            ""bindingGroup"": ""New control scheme"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Input Player 1
        m_InputPlayer1 = asset.FindActionMap("Input Player 1", throwIfNotFound: true);
        m_InputPlayer1_Movement = m_InputPlayer1.FindAction("Movement", throwIfNotFound: true);
        m_InputPlayer1_GarbageStore = m_InputPlayer1.FindAction("Garbage Store", throwIfNotFound: true);
        m_InputPlayer1_InteractTap = m_InputPlayer1.FindAction("Interact Tap", throwIfNotFound: true);
        m_InputPlayer1_InteractHold = m_InputPlayer1.FindAction("Interact Hold", throwIfNotFound: true);
        m_InputPlayer1_GiveHealth = m_InputPlayer1.FindAction("Give Health", throwIfNotFound: true);
        m_InputPlayer1_Brake = m_InputPlayer1.FindAction("Brake", throwIfNotFound: true);
        m_InputPlayer1_BasicSkillDash = m_InputPlayer1.FindAction("Basic Skill Dash", throwIfNotFound: true);
        m_InputPlayer1_SpecialSkillPullUp = m_InputPlayer1.FindAction("Special Skill Pull Up", throwIfNotFound: true);
        // Input Player 2
        m_InputPlayer2 = asset.FindActionMap("Input Player 2", throwIfNotFound: true);
        m_InputPlayer2_Movement = m_InputPlayer2.FindAction("Movement", throwIfNotFound: true);
        m_InputPlayer2_GarbageStore = m_InputPlayer2.FindAction("Garbage Store", throwIfNotFound: true);
        m_InputPlayer2_InteractTap = m_InputPlayer2.FindAction("Interact Tap", throwIfNotFound: true);
        m_InputPlayer2_InteractHold = m_InputPlayer2.FindAction("Interact Hold", throwIfNotFound: true);
        m_InputPlayer2_GiveHealth = m_InputPlayer2.FindAction("Give Health", throwIfNotFound: true);
        m_InputPlayer2_Brake = m_InputPlayer2.FindAction("Brake", throwIfNotFound: true);
        m_InputPlayer2_BasicSkillDash = m_InputPlayer2.FindAction("Basic Skill Dash", throwIfNotFound: true);
        m_InputPlayer2_SpecialSkillShield = m_InputPlayer2.FindAction("Special Skill Shield", throwIfNotFound: true);
        // Main Menu
        m_MainMenu = asset.FindActionMap("Main Menu", throwIfNotFound: true);
        m_MainMenu_NavigationUp = m_MainMenu.FindAction("Navigation Up", throwIfNotFound: true);
        m_MainMenu_NavigationDown = m_MainMenu.FindAction("Navigation Down", throwIfNotFound: true);
        m_MainMenu_NavigationConfirm = m_MainMenu.FindAction("Navigation Confirm", throwIfNotFound: true);
        // Select Level
        m_SelectLevel = asset.FindActionMap("Select Level", throwIfNotFound: true);
        m_SelectLevel_NavigationLeft = m_SelectLevel.FindAction("Navigation Left", throwIfNotFound: true);
        m_SelectLevel_NavigationRIght = m_SelectLevel.FindAction("Navigation RIght", throwIfNotFound: true);
        m_SelectLevel_NavigationConfirm = m_SelectLevel.FindAction("Navigation Confirm", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Input Player 1
    private readonly InputActionMap m_InputPlayer1;
    private List<IInputPlayer1Actions> m_InputPlayer1ActionsCallbackInterfaces = new List<IInputPlayer1Actions>();
    private readonly InputAction m_InputPlayer1_Movement;
    private readonly InputAction m_InputPlayer1_GarbageStore;
    private readonly InputAction m_InputPlayer1_InteractTap;
    private readonly InputAction m_InputPlayer1_InteractHold;
    private readonly InputAction m_InputPlayer1_GiveHealth;
    private readonly InputAction m_InputPlayer1_Brake;
    private readonly InputAction m_InputPlayer1_BasicSkillDash;
    private readonly InputAction m_InputPlayer1_SpecialSkillPullUp;
    public struct InputPlayer1Actions
    {
        private @InputControl m_Wrapper;
        public InputPlayer1Actions(@InputControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_InputPlayer1_Movement;
        public InputAction @GarbageStore => m_Wrapper.m_InputPlayer1_GarbageStore;
        public InputAction @InteractTap => m_Wrapper.m_InputPlayer1_InteractTap;
        public InputAction @InteractHold => m_Wrapper.m_InputPlayer1_InteractHold;
        public InputAction @GiveHealth => m_Wrapper.m_InputPlayer1_GiveHealth;
        public InputAction @Brake => m_Wrapper.m_InputPlayer1_Brake;
        public InputAction @BasicSkillDash => m_Wrapper.m_InputPlayer1_BasicSkillDash;
        public InputAction @SpecialSkillPullUp => m_Wrapper.m_InputPlayer1_SpecialSkillPullUp;
        public InputActionMap Get() { return m_Wrapper.m_InputPlayer1; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InputPlayer1Actions set) { return set.Get(); }
        public void AddCallbacks(IInputPlayer1Actions instance)
        {
            if (instance == null || m_Wrapper.m_InputPlayer1ActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InputPlayer1ActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @GarbageStore.started += instance.OnGarbageStore;
            @GarbageStore.performed += instance.OnGarbageStore;
            @GarbageStore.canceled += instance.OnGarbageStore;
            @InteractTap.started += instance.OnInteractTap;
            @InteractTap.performed += instance.OnInteractTap;
            @InteractTap.canceled += instance.OnInteractTap;
            @InteractHold.started += instance.OnInteractHold;
            @InteractHold.performed += instance.OnInteractHold;
            @InteractHold.canceled += instance.OnInteractHold;
            @GiveHealth.started += instance.OnGiveHealth;
            @GiveHealth.performed += instance.OnGiveHealth;
            @GiveHealth.canceled += instance.OnGiveHealth;
            @Brake.started += instance.OnBrake;
            @Brake.performed += instance.OnBrake;
            @Brake.canceled += instance.OnBrake;
            @BasicSkillDash.started += instance.OnBasicSkillDash;
            @BasicSkillDash.performed += instance.OnBasicSkillDash;
            @BasicSkillDash.canceled += instance.OnBasicSkillDash;
            @SpecialSkillPullUp.started += instance.OnSpecialSkillPullUp;
            @SpecialSkillPullUp.performed += instance.OnSpecialSkillPullUp;
            @SpecialSkillPullUp.canceled += instance.OnSpecialSkillPullUp;
        }

        private void UnregisterCallbacks(IInputPlayer1Actions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @GarbageStore.started -= instance.OnGarbageStore;
            @GarbageStore.performed -= instance.OnGarbageStore;
            @GarbageStore.canceled -= instance.OnGarbageStore;
            @InteractTap.started -= instance.OnInteractTap;
            @InteractTap.performed -= instance.OnInteractTap;
            @InteractTap.canceled -= instance.OnInteractTap;
            @InteractHold.started -= instance.OnInteractHold;
            @InteractHold.performed -= instance.OnInteractHold;
            @InteractHold.canceled -= instance.OnInteractHold;
            @GiveHealth.started -= instance.OnGiveHealth;
            @GiveHealth.performed -= instance.OnGiveHealth;
            @GiveHealth.canceled -= instance.OnGiveHealth;
            @Brake.started -= instance.OnBrake;
            @Brake.performed -= instance.OnBrake;
            @Brake.canceled -= instance.OnBrake;
            @BasicSkillDash.started -= instance.OnBasicSkillDash;
            @BasicSkillDash.performed -= instance.OnBasicSkillDash;
            @BasicSkillDash.canceled -= instance.OnBasicSkillDash;
            @SpecialSkillPullUp.started -= instance.OnSpecialSkillPullUp;
            @SpecialSkillPullUp.performed -= instance.OnSpecialSkillPullUp;
            @SpecialSkillPullUp.canceled -= instance.OnSpecialSkillPullUp;
        }

        public void RemoveCallbacks(IInputPlayer1Actions instance)
        {
            if (m_Wrapper.m_InputPlayer1ActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInputPlayer1Actions instance)
        {
            foreach (var item in m_Wrapper.m_InputPlayer1ActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InputPlayer1ActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InputPlayer1Actions @InputPlayer1 => new InputPlayer1Actions(this);

    // Input Player 2
    private readonly InputActionMap m_InputPlayer2;
    private List<IInputPlayer2Actions> m_InputPlayer2ActionsCallbackInterfaces = new List<IInputPlayer2Actions>();
    private readonly InputAction m_InputPlayer2_Movement;
    private readonly InputAction m_InputPlayer2_GarbageStore;
    private readonly InputAction m_InputPlayer2_InteractTap;
    private readonly InputAction m_InputPlayer2_InteractHold;
    private readonly InputAction m_InputPlayer2_GiveHealth;
    private readonly InputAction m_InputPlayer2_Brake;
    private readonly InputAction m_InputPlayer2_BasicSkillDash;
    private readonly InputAction m_InputPlayer2_SpecialSkillShield;
    public struct InputPlayer2Actions
    {
        private @InputControl m_Wrapper;
        public InputPlayer2Actions(@InputControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_InputPlayer2_Movement;
        public InputAction @GarbageStore => m_Wrapper.m_InputPlayer2_GarbageStore;
        public InputAction @InteractTap => m_Wrapper.m_InputPlayer2_InteractTap;
        public InputAction @InteractHold => m_Wrapper.m_InputPlayer2_InteractHold;
        public InputAction @GiveHealth => m_Wrapper.m_InputPlayer2_GiveHealth;
        public InputAction @Brake => m_Wrapper.m_InputPlayer2_Brake;
        public InputAction @BasicSkillDash => m_Wrapper.m_InputPlayer2_BasicSkillDash;
        public InputAction @SpecialSkillShield => m_Wrapper.m_InputPlayer2_SpecialSkillShield;
        public InputActionMap Get() { return m_Wrapper.m_InputPlayer2; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InputPlayer2Actions set) { return set.Get(); }
        public void AddCallbacks(IInputPlayer2Actions instance)
        {
            if (instance == null || m_Wrapper.m_InputPlayer2ActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InputPlayer2ActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @GarbageStore.started += instance.OnGarbageStore;
            @GarbageStore.performed += instance.OnGarbageStore;
            @GarbageStore.canceled += instance.OnGarbageStore;
            @InteractTap.started += instance.OnInteractTap;
            @InteractTap.performed += instance.OnInteractTap;
            @InteractTap.canceled += instance.OnInteractTap;
            @InteractHold.started += instance.OnInteractHold;
            @InteractHold.performed += instance.OnInteractHold;
            @InteractHold.canceled += instance.OnInteractHold;
            @GiveHealth.started += instance.OnGiveHealth;
            @GiveHealth.performed += instance.OnGiveHealth;
            @GiveHealth.canceled += instance.OnGiveHealth;
            @Brake.started += instance.OnBrake;
            @Brake.performed += instance.OnBrake;
            @Brake.canceled += instance.OnBrake;
            @BasicSkillDash.started += instance.OnBasicSkillDash;
            @BasicSkillDash.performed += instance.OnBasicSkillDash;
            @BasicSkillDash.canceled += instance.OnBasicSkillDash;
            @SpecialSkillShield.started += instance.OnSpecialSkillShield;
            @SpecialSkillShield.performed += instance.OnSpecialSkillShield;
            @SpecialSkillShield.canceled += instance.OnSpecialSkillShield;
        }

        private void UnregisterCallbacks(IInputPlayer2Actions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @GarbageStore.started -= instance.OnGarbageStore;
            @GarbageStore.performed -= instance.OnGarbageStore;
            @GarbageStore.canceled -= instance.OnGarbageStore;
            @InteractTap.started -= instance.OnInteractTap;
            @InteractTap.performed -= instance.OnInteractTap;
            @InteractTap.canceled -= instance.OnInteractTap;
            @InteractHold.started -= instance.OnInteractHold;
            @InteractHold.performed -= instance.OnInteractHold;
            @InteractHold.canceled -= instance.OnInteractHold;
            @GiveHealth.started -= instance.OnGiveHealth;
            @GiveHealth.performed -= instance.OnGiveHealth;
            @GiveHealth.canceled -= instance.OnGiveHealth;
            @Brake.started -= instance.OnBrake;
            @Brake.performed -= instance.OnBrake;
            @Brake.canceled -= instance.OnBrake;
            @BasicSkillDash.started -= instance.OnBasicSkillDash;
            @BasicSkillDash.performed -= instance.OnBasicSkillDash;
            @BasicSkillDash.canceled -= instance.OnBasicSkillDash;
            @SpecialSkillShield.started -= instance.OnSpecialSkillShield;
            @SpecialSkillShield.performed -= instance.OnSpecialSkillShield;
            @SpecialSkillShield.canceled -= instance.OnSpecialSkillShield;
        }

        public void RemoveCallbacks(IInputPlayer2Actions instance)
        {
            if (m_Wrapper.m_InputPlayer2ActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInputPlayer2Actions instance)
        {
            foreach (var item in m_Wrapper.m_InputPlayer2ActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InputPlayer2ActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InputPlayer2Actions @InputPlayer2 => new InputPlayer2Actions(this);

    // Main Menu
    private readonly InputActionMap m_MainMenu;
    private List<IMainMenuActions> m_MainMenuActionsCallbackInterfaces = new List<IMainMenuActions>();
    private readonly InputAction m_MainMenu_NavigationUp;
    private readonly InputAction m_MainMenu_NavigationDown;
    private readonly InputAction m_MainMenu_NavigationConfirm;
    public struct MainMenuActions
    {
        private @InputControl m_Wrapper;
        public MainMenuActions(@InputControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @NavigationUp => m_Wrapper.m_MainMenu_NavigationUp;
        public InputAction @NavigationDown => m_Wrapper.m_MainMenu_NavigationDown;
        public InputAction @NavigationConfirm => m_Wrapper.m_MainMenu_NavigationConfirm;
        public InputActionMap Get() { return m_Wrapper.m_MainMenu; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainMenuActions set) { return set.Get(); }
        public void AddCallbacks(IMainMenuActions instance)
        {
            if (instance == null || m_Wrapper.m_MainMenuActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MainMenuActionsCallbackInterfaces.Add(instance);
            @NavigationUp.started += instance.OnNavigationUp;
            @NavigationUp.performed += instance.OnNavigationUp;
            @NavigationUp.canceled += instance.OnNavigationUp;
            @NavigationDown.started += instance.OnNavigationDown;
            @NavigationDown.performed += instance.OnNavigationDown;
            @NavigationDown.canceled += instance.OnNavigationDown;
            @NavigationConfirm.started += instance.OnNavigationConfirm;
            @NavigationConfirm.performed += instance.OnNavigationConfirm;
            @NavigationConfirm.canceled += instance.OnNavigationConfirm;
        }

        private void UnregisterCallbacks(IMainMenuActions instance)
        {
            @NavigationUp.started -= instance.OnNavigationUp;
            @NavigationUp.performed -= instance.OnNavigationUp;
            @NavigationUp.canceled -= instance.OnNavigationUp;
            @NavigationDown.started -= instance.OnNavigationDown;
            @NavigationDown.performed -= instance.OnNavigationDown;
            @NavigationDown.canceled -= instance.OnNavigationDown;
            @NavigationConfirm.started -= instance.OnNavigationConfirm;
            @NavigationConfirm.performed -= instance.OnNavigationConfirm;
            @NavigationConfirm.canceled -= instance.OnNavigationConfirm;
        }

        public void RemoveCallbacks(IMainMenuActions instance)
        {
            if (m_Wrapper.m_MainMenuActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMainMenuActions instance)
        {
            foreach (var item in m_Wrapper.m_MainMenuActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MainMenuActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MainMenuActions @MainMenu => new MainMenuActions(this);

    // Select Level
    private readonly InputActionMap m_SelectLevel;
    private List<ISelectLevelActions> m_SelectLevelActionsCallbackInterfaces = new List<ISelectLevelActions>();
    private readonly InputAction m_SelectLevel_NavigationLeft;
    private readonly InputAction m_SelectLevel_NavigationRIght;
    private readonly InputAction m_SelectLevel_NavigationConfirm;
    public struct SelectLevelActions
    {
        private @InputControl m_Wrapper;
        public SelectLevelActions(@InputControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @NavigationLeft => m_Wrapper.m_SelectLevel_NavigationLeft;
        public InputAction @NavigationRIght => m_Wrapper.m_SelectLevel_NavigationRIght;
        public InputAction @NavigationConfirm => m_Wrapper.m_SelectLevel_NavigationConfirm;
        public InputActionMap Get() { return m_Wrapper.m_SelectLevel; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SelectLevelActions set) { return set.Get(); }
        public void AddCallbacks(ISelectLevelActions instance)
        {
            if (instance == null || m_Wrapper.m_SelectLevelActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SelectLevelActionsCallbackInterfaces.Add(instance);
            @NavigationLeft.started += instance.OnNavigationLeft;
            @NavigationLeft.performed += instance.OnNavigationLeft;
            @NavigationLeft.canceled += instance.OnNavigationLeft;
            @NavigationRIght.started += instance.OnNavigationRIght;
            @NavigationRIght.performed += instance.OnNavigationRIght;
            @NavigationRIght.canceled += instance.OnNavigationRIght;
            @NavigationConfirm.started += instance.OnNavigationConfirm;
            @NavigationConfirm.performed += instance.OnNavigationConfirm;
            @NavigationConfirm.canceled += instance.OnNavigationConfirm;
        }

        private void UnregisterCallbacks(ISelectLevelActions instance)
        {
            @NavigationLeft.started -= instance.OnNavigationLeft;
            @NavigationLeft.performed -= instance.OnNavigationLeft;
            @NavigationLeft.canceled -= instance.OnNavigationLeft;
            @NavigationRIght.started -= instance.OnNavigationRIght;
            @NavigationRIght.performed -= instance.OnNavigationRIght;
            @NavigationRIght.canceled -= instance.OnNavigationRIght;
            @NavigationConfirm.started -= instance.OnNavigationConfirm;
            @NavigationConfirm.performed -= instance.OnNavigationConfirm;
            @NavigationConfirm.canceled -= instance.OnNavigationConfirm;
        }

        public void RemoveCallbacks(ISelectLevelActions instance)
        {
            if (m_Wrapper.m_SelectLevelActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISelectLevelActions instance)
        {
            foreach (var item in m_Wrapper.m_SelectLevelActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SelectLevelActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SelectLevelActions @SelectLevel => new SelectLevelActions(this);
    private int m_KeyboardSchemeSchemeIndex = -1;
    public InputControlScheme KeyboardSchemeScheme
    {
        get
        {
            if (m_KeyboardSchemeSchemeIndex == -1) m_KeyboardSchemeSchemeIndex = asset.FindControlSchemeIndex("Keyboard Scheme");
            return asset.controlSchemes[m_KeyboardSchemeSchemeIndex];
        }
    }
    private int m_GamepadSchemeSchemeIndex = -1;
    public InputControlScheme GamepadSchemeScheme
    {
        get
        {
            if (m_GamepadSchemeSchemeIndex == -1) m_GamepadSchemeSchemeIndex = asset.FindControlSchemeIndex("Gamepad Scheme");
            return asset.controlSchemes[m_GamepadSchemeSchemeIndex];
        }
    }
    private int m_NewcontrolschemeSchemeIndex = -1;
    public InputControlScheme NewcontrolschemeScheme
    {
        get
        {
            if (m_NewcontrolschemeSchemeIndex == -1) m_NewcontrolschemeSchemeIndex = asset.FindControlSchemeIndex("New control scheme");
            return asset.controlSchemes[m_NewcontrolschemeSchemeIndex];
        }
    }
    public interface IInputPlayer1Actions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnGarbageStore(InputAction.CallbackContext context);
        void OnInteractTap(InputAction.CallbackContext context);
        void OnInteractHold(InputAction.CallbackContext context);
        void OnGiveHealth(InputAction.CallbackContext context);
        void OnBrake(InputAction.CallbackContext context);
        void OnBasicSkillDash(InputAction.CallbackContext context);
        void OnSpecialSkillPullUp(InputAction.CallbackContext context);
    }
    public interface IInputPlayer2Actions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnGarbageStore(InputAction.CallbackContext context);
        void OnInteractTap(InputAction.CallbackContext context);
        void OnInteractHold(InputAction.CallbackContext context);
        void OnGiveHealth(InputAction.CallbackContext context);
        void OnBrake(InputAction.CallbackContext context);
        void OnBasicSkillDash(InputAction.CallbackContext context);
        void OnSpecialSkillShield(InputAction.CallbackContext context);
    }
    public interface IMainMenuActions
    {
        void OnNavigationUp(InputAction.CallbackContext context);
        void OnNavigationDown(InputAction.CallbackContext context);
        void OnNavigationConfirm(InputAction.CallbackContext context);
    }
    public interface ISelectLevelActions
    {
        void OnNavigationLeft(InputAction.CallbackContext context);
        void OnNavigationRIght(InputAction.CallbackContext context);
        void OnNavigationConfirm(InputAction.CallbackContext context);
    }
}
