//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Input Action/Input Control.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputControl: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputControl()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Input Control"",
    ""maps"": [
        {
            ""name"": ""Input Player 1"",
            ""id"": ""e2b9b3f5-245d-4100-8344-292ea36e7395"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""388d81ce-db95-41c0-a2fb-a192206b4e27"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact Press"",
                    ""type"": ""Button"",
                    ""id"": ""d00c6259-4f03-44f9-aeb1-587ce289e2c2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact Tap"",
                    ""type"": ""Button"",
                    ""id"": ""13f866bb-7131-45c2-b44e-a38c147a99a0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact Hold"",
                    ""type"": ""Button"",
                    ""id"": ""da185e95-fb85-4a38-8459-f7b358533323"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Give Health"",
                    ""type"": ""Button"",
                    ""id"": ""4439dbc1-55e2-4bdc-a1e2-caa9f7e1ad65"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Basic Skill Dash"",
                    ""type"": ""Button"",
                    ""id"": ""008bd728-9221-4d3a-8ab1-845449e9e387"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Basic Skill Ghost"",
                    ""type"": ""Button"",
                    ""id"": ""250bb9b5-4e5e-4e86-a2fc-4c8982f1f65f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Change Link"",
                    ""type"": ""Button"",
                    ""id"": ""a9a444fa-beb5-47e7-a00f-295983c6397f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""f82f6446-4584-4b33-a286-b79946e7c988"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""27b01e69-bee4-4005-9574-fe1e58d176c7"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard Scheme"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""dbb431f0-3671-45f6-8a8b-dbd23dfd7130"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard Scheme"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""0c123479-a37f-44a9-940f-9a0c52751630"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard Scheme"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""7f913523-7558-4e09-850a-1d0ade322d6b"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard Scheme"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrow Key"",
                    ""id"": ""3ea6fcf0-e34e-485d-b408-fb517f7f7883"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""7b7208e8-34a8-491c-9a42-7996641046ef"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard Scheme"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""90209b50-5610-4943-9c74-6bffd6c1c9e3"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard Scheme"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""fe508241-6cb7-43b5-af65-a47eab40ea73"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard Scheme"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""966dd2bc-68aa-42b3-9c3b-0f219b70756e"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard Scheme"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""8f897e8f-0d7e-4f6b-ab30-54bf62a0259c"",
                    ""path"": ""<Keyboard>/g"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": ""Keyboard Scheme"",
                    ""action"": ""Give Health"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8a5e7c01-edf9-4278-af5d-fee1fa3bd93c"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard Scheme"",
                    ""action"": ""Basic Skill Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""57a36c9f-c2e5-4571-ae99-8f98d8572842"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact Hold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8ed3dd44-ee5f-4a89-83bd-d1ac18dfae2a"",
                    ""path"": """",
                    ""interactions"": ""MultiTap(tapCount=3)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact Tap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5dfb62fa-2918-40e2-82ed-1c71c2d761d1"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""Keyboard Scheme"",
                    ""action"": ""Interact Press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2c2e3ea9-b5e6-4bb8-84c1-f7dffc0e8953"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard Scheme"",
                    ""action"": ""Change Link"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b774218d-1c96-410e-8efd-5cb3699e0c23"",
                    ""path"": ""<Keyboard>/g"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard Scheme"",
                    ""action"": ""Basic Skill Ghost"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Input Player 2"",
            ""id"": ""44d51ae9-0571-42e3-95c3-3a870f5ea4bb"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""0c6bd544-d51d-4d15-9a8a-698487d219cb"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact Press"",
                    ""type"": ""Button"",
                    ""id"": ""ad4d6e57-d202-4205-a368-a4255c91da3f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact Hold"",
                    ""type"": ""Button"",
                    ""id"": ""0ef49c3e-5618-428d-a2b8-6f821fba5ba2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact Tap"",
                    ""type"": ""Button"",
                    ""id"": ""7e9757a9-c4fb-4ff6-b915-79e9d9e8ca7a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Basic Skill Dash"",
                    ""type"": ""Button"",
                    ""id"": ""52f730c5-86c0-4178-86ef-38534a3e8046"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Basic Skill Ghost"",
                    ""type"": ""Button"",
                    ""id"": ""4af3bff8-8a64-4d2f-9bd0-9ea63d615ebb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Give Health"",
                    ""type"": ""Button"",
                    ""id"": ""7da49372-5dfe-43b4-84e2-4bbc8ec74f8f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Change Link"",
                    ""type"": ""Button"",
                    ""id"": ""c473713c-8497-4e8c-99a7-835e0d925607"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""33feafd7-b67f-42bd-a9a7-ecb707b99b20"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad Scheme"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f79acedc-2964-4044-9339-366ad1170018"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": ""Gamepad Scheme"",
                    ""action"": ""Give Health"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""100370a0-11bd-41ad-997d-95854f7d601e"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad Scheme"",
                    ""action"": ""Basic Skill Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fad1625f-8865-462d-9df5-83242fd08559"",
                    ""path"": """",
                    ""interactions"": ""MultiTap(tapCount=3)"",
                    ""processors"": """",
                    ""groups"": ""Gamepad Scheme"",
                    ""action"": ""Interact Tap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""846f97de-fb7b-417d-8cd4-c10570c76305"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad Scheme"",
                    ""action"": ""Interact Hold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""90488185-bc79-4037-b665-d01ebddf1633"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""Gamepad Scheme"",
                    ""action"": ""Interact Press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7d6c5153-cb0e-42fb-8477-94aa3ff390cb"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad Scheme"",
                    ""action"": ""Change Link"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""78d08b0f-d2f5-4f51-8a68-ae5bc40f6123"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Basic Skill Ghost"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Input Main Menu"",
            ""id"": ""7faa0509-803b-4b91-bfab-6342471aa9c4"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""7e1d956e-a07b-435b-ade5-61307944c8a6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6ab44e65-b12e-443a-9dad-67c30b99d210"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Input Select Level"",
            ""id"": ""76f10b55-a4d6-40aa-95af-77f29357d281"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""0d0455cf-579b-4d16-961e-41f135daee55"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1f2863e4-de94-4204-a22a-079a52eb665e"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Input Select Player"",
            ""id"": ""7ee50518-cddd-4671-8101-a12dfd706a4d"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""13729b59-fe6d-4663-928d-61c56f7f80e9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5462bc1c-7ca5-406f-a590-5b7fe41b8da4"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Input Game Pause"",
            ""id"": ""e25006ec-ec45-406f-b5c1-63646196d0a4"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""7ae3b5f4-a387-4307-90a5-19d262ab2517"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fa4d1ce1-9420-46f3-b019-027d6456e051"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Input Game Finish"",
            ""id"": ""eb414efe-3adc-4c25-839b-9fa05c7afb3c"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""ba1addda-4e5d-4fc9-9cca-a32652316810"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6c82e1de-49f5-4822-a5db-fffe6080c1f5"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard Scheme"",
            ""bindingGroup"": ""Keyboard Scheme"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad Scheme"",
            ""bindingGroup"": ""Gamepad Scheme"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Mouse Scheme"",
            ""bindingGroup"": ""Mouse Scheme"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Input Player 1
        m_InputPlayer1 = asset.FindActionMap("Input Player 1", throwIfNotFound: true);
        m_InputPlayer1_Movement = m_InputPlayer1.FindAction("Movement", throwIfNotFound: true);
        m_InputPlayer1_InteractPress = m_InputPlayer1.FindAction("Interact Press", throwIfNotFound: true);
        m_InputPlayer1_InteractTap = m_InputPlayer1.FindAction("Interact Tap", throwIfNotFound: true);
        m_InputPlayer1_InteractHold = m_InputPlayer1.FindAction("Interact Hold", throwIfNotFound: true);
        m_InputPlayer1_GiveHealth = m_InputPlayer1.FindAction("Give Health", throwIfNotFound: true);
        m_InputPlayer1_BasicSkillDash = m_InputPlayer1.FindAction("Basic Skill Dash", throwIfNotFound: true);
        m_InputPlayer1_BasicSkillGhost = m_InputPlayer1.FindAction("Basic Skill Ghost", throwIfNotFound: true);
        m_InputPlayer1_ChangeLink = m_InputPlayer1.FindAction("Change Link", throwIfNotFound: true);
        // Input Player 2
        m_InputPlayer2 = asset.FindActionMap("Input Player 2", throwIfNotFound: true);
        m_InputPlayer2_Movement = m_InputPlayer2.FindAction("Movement", throwIfNotFound: true);
        m_InputPlayer2_InteractPress = m_InputPlayer2.FindAction("Interact Press", throwIfNotFound: true);
        m_InputPlayer2_InteractHold = m_InputPlayer2.FindAction("Interact Hold", throwIfNotFound: true);
        m_InputPlayer2_InteractTap = m_InputPlayer2.FindAction("Interact Tap", throwIfNotFound: true);
        m_InputPlayer2_BasicSkillDash = m_InputPlayer2.FindAction("Basic Skill Dash", throwIfNotFound: true);
        m_InputPlayer2_BasicSkillGhost = m_InputPlayer2.FindAction("Basic Skill Ghost", throwIfNotFound: true);
        m_InputPlayer2_GiveHealth = m_InputPlayer2.FindAction("Give Health", throwIfNotFound: true);
        m_InputPlayer2_ChangeLink = m_InputPlayer2.FindAction("Change Link", throwIfNotFound: true);
        // Input Main Menu
        m_InputMainMenu = asset.FindActionMap("Input Main Menu", throwIfNotFound: true);
        m_InputMainMenu_Newaction = m_InputMainMenu.FindAction("New action", throwIfNotFound: true);
        // Input Select Level
        m_InputSelectLevel = asset.FindActionMap("Input Select Level", throwIfNotFound: true);
        m_InputSelectLevel_Newaction = m_InputSelectLevel.FindAction("New action", throwIfNotFound: true);
        // Input Select Player
        m_InputSelectPlayer = asset.FindActionMap("Input Select Player", throwIfNotFound: true);
        m_InputSelectPlayer_Newaction = m_InputSelectPlayer.FindAction("New action", throwIfNotFound: true);
        // Input Game Pause
        m_InputGamePause = asset.FindActionMap("Input Game Pause", throwIfNotFound: true);
        m_InputGamePause_Newaction = m_InputGamePause.FindAction("New action", throwIfNotFound: true);
        // Input Game Finish
        m_InputGameFinish = asset.FindActionMap("Input Game Finish", throwIfNotFound: true);
        m_InputGameFinish_Newaction = m_InputGameFinish.FindAction("New action", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Input Player 1
    private readonly InputActionMap m_InputPlayer1;
    private List<IInputPlayer1Actions> m_InputPlayer1ActionsCallbackInterfaces = new List<IInputPlayer1Actions>();
    private readonly InputAction m_InputPlayer1_Movement;
    private readonly InputAction m_InputPlayer1_InteractPress;
    private readonly InputAction m_InputPlayer1_InteractTap;
    private readonly InputAction m_InputPlayer1_InteractHold;
    private readonly InputAction m_InputPlayer1_GiveHealth;
    private readonly InputAction m_InputPlayer1_BasicSkillDash;
    private readonly InputAction m_InputPlayer1_BasicSkillGhost;
    private readonly InputAction m_InputPlayer1_ChangeLink;
    public struct InputPlayer1Actions
    {
        private @InputControl m_Wrapper;
        public InputPlayer1Actions(@InputControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_InputPlayer1_Movement;
        public InputAction @InteractPress => m_Wrapper.m_InputPlayer1_InteractPress;
        public InputAction @InteractTap => m_Wrapper.m_InputPlayer1_InteractTap;
        public InputAction @InteractHold => m_Wrapper.m_InputPlayer1_InteractHold;
        public InputAction @GiveHealth => m_Wrapper.m_InputPlayer1_GiveHealth;
        public InputAction @BasicSkillDash => m_Wrapper.m_InputPlayer1_BasicSkillDash;
        public InputAction @BasicSkillGhost => m_Wrapper.m_InputPlayer1_BasicSkillGhost;
        public InputAction @ChangeLink => m_Wrapper.m_InputPlayer1_ChangeLink;
        public InputActionMap Get() { return m_Wrapper.m_InputPlayer1; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InputPlayer1Actions set) { return set.Get(); }
        public void AddCallbacks(IInputPlayer1Actions instance)
        {
            if (instance == null || m_Wrapper.m_InputPlayer1ActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InputPlayer1ActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @InteractPress.started += instance.OnInteractPress;
            @InteractPress.performed += instance.OnInteractPress;
            @InteractPress.canceled += instance.OnInteractPress;
            @InteractTap.started += instance.OnInteractTap;
            @InteractTap.performed += instance.OnInteractTap;
            @InteractTap.canceled += instance.OnInteractTap;
            @InteractHold.started += instance.OnInteractHold;
            @InteractHold.performed += instance.OnInteractHold;
            @InteractHold.canceled += instance.OnInteractHold;
            @GiveHealth.started += instance.OnGiveHealth;
            @GiveHealth.performed += instance.OnGiveHealth;
            @GiveHealth.canceled += instance.OnGiveHealth;
            @BasicSkillDash.started += instance.OnBasicSkillDash;
            @BasicSkillDash.performed += instance.OnBasicSkillDash;
            @BasicSkillDash.canceled += instance.OnBasicSkillDash;
            @BasicSkillGhost.started += instance.OnBasicSkillGhost;
            @BasicSkillGhost.performed += instance.OnBasicSkillGhost;
            @BasicSkillGhost.canceled += instance.OnBasicSkillGhost;
            @ChangeLink.started += instance.OnChangeLink;
            @ChangeLink.performed += instance.OnChangeLink;
            @ChangeLink.canceled += instance.OnChangeLink;
        }

        private void UnregisterCallbacks(IInputPlayer1Actions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @InteractPress.started -= instance.OnInteractPress;
            @InteractPress.performed -= instance.OnInteractPress;
            @InteractPress.canceled -= instance.OnInteractPress;
            @InteractTap.started -= instance.OnInteractTap;
            @InteractTap.performed -= instance.OnInteractTap;
            @InteractTap.canceled -= instance.OnInteractTap;
            @InteractHold.started -= instance.OnInteractHold;
            @InteractHold.performed -= instance.OnInteractHold;
            @InteractHold.canceled -= instance.OnInteractHold;
            @GiveHealth.started -= instance.OnGiveHealth;
            @GiveHealth.performed -= instance.OnGiveHealth;
            @GiveHealth.canceled -= instance.OnGiveHealth;
            @BasicSkillDash.started -= instance.OnBasicSkillDash;
            @BasicSkillDash.performed -= instance.OnBasicSkillDash;
            @BasicSkillDash.canceled -= instance.OnBasicSkillDash;
            @BasicSkillGhost.started -= instance.OnBasicSkillGhost;
            @BasicSkillGhost.performed -= instance.OnBasicSkillGhost;
            @BasicSkillGhost.canceled -= instance.OnBasicSkillGhost;
            @ChangeLink.started -= instance.OnChangeLink;
            @ChangeLink.performed -= instance.OnChangeLink;
            @ChangeLink.canceled -= instance.OnChangeLink;
        }

        public void RemoveCallbacks(IInputPlayer1Actions instance)
        {
            if (m_Wrapper.m_InputPlayer1ActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInputPlayer1Actions instance)
        {
            foreach (var item in m_Wrapper.m_InputPlayer1ActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InputPlayer1ActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InputPlayer1Actions @InputPlayer1 => new InputPlayer1Actions(this);

    // Input Player 2
    private readonly InputActionMap m_InputPlayer2;
    private List<IInputPlayer2Actions> m_InputPlayer2ActionsCallbackInterfaces = new List<IInputPlayer2Actions>();
    private readonly InputAction m_InputPlayer2_Movement;
    private readonly InputAction m_InputPlayer2_InteractPress;
    private readonly InputAction m_InputPlayer2_InteractHold;
    private readonly InputAction m_InputPlayer2_InteractTap;
    private readonly InputAction m_InputPlayer2_BasicSkillDash;
    private readonly InputAction m_InputPlayer2_BasicSkillGhost;
    private readonly InputAction m_InputPlayer2_GiveHealth;
    private readonly InputAction m_InputPlayer2_ChangeLink;
    public struct InputPlayer2Actions
    {
        private @InputControl m_Wrapper;
        public InputPlayer2Actions(@InputControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_InputPlayer2_Movement;
        public InputAction @InteractPress => m_Wrapper.m_InputPlayer2_InteractPress;
        public InputAction @InteractHold => m_Wrapper.m_InputPlayer2_InteractHold;
        public InputAction @InteractTap => m_Wrapper.m_InputPlayer2_InteractTap;
        public InputAction @BasicSkillDash => m_Wrapper.m_InputPlayer2_BasicSkillDash;
        public InputAction @BasicSkillGhost => m_Wrapper.m_InputPlayer2_BasicSkillGhost;
        public InputAction @GiveHealth => m_Wrapper.m_InputPlayer2_GiveHealth;
        public InputAction @ChangeLink => m_Wrapper.m_InputPlayer2_ChangeLink;
        public InputActionMap Get() { return m_Wrapper.m_InputPlayer2; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InputPlayer2Actions set) { return set.Get(); }
        public void AddCallbacks(IInputPlayer2Actions instance)
        {
            if (instance == null || m_Wrapper.m_InputPlayer2ActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InputPlayer2ActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @InteractPress.started += instance.OnInteractPress;
            @InteractPress.performed += instance.OnInteractPress;
            @InteractPress.canceled += instance.OnInteractPress;
            @InteractHold.started += instance.OnInteractHold;
            @InteractHold.performed += instance.OnInteractHold;
            @InteractHold.canceled += instance.OnInteractHold;
            @InteractTap.started += instance.OnInteractTap;
            @InteractTap.performed += instance.OnInteractTap;
            @InteractTap.canceled += instance.OnInteractTap;
            @BasicSkillDash.started += instance.OnBasicSkillDash;
            @BasicSkillDash.performed += instance.OnBasicSkillDash;
            @BasicSkillDash.canceled += instance.OnBasicSkillDash;
            @BasicSkillGhost.started += instance.OnBasicSkillGhost;
            @BasicSkillGhost.performed += instance.OnBasicSkillGhost;
            @BasicSkillGhost.canceled += instance.OnBasicSkillGhost;
            @GiveHealth.started += instance.OnGiveHealth;
            @GiveHealth.performed += instance.OnGiveHealth;
            @GiveHealth.canceled += instance.OnGiveHealth;
            @ChangeLink.started += instance.OnChangeLink;
            @ChangeLink.performed += instance.OnChangeLink;
            @ChangeLink.canceled += instance.OnChangeLink;
        }

        private void UnregisterCallbacks(IInputPlayer2Actions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @InteractPress.started -= instance.OnInteractPress;
            @InteractPress.performed -= instance.OnInteractPress;
            @InteractPress.canceled -= instance.OnInteractPress;
            @InteractHold.started -= instance.OnInteractHold;
            @InteractHold.performed -= instance.OnInteractHold;
            @InteractHold.canceled -= instance.OnInteractHold;
            @InteractTap.started -= instance.OnInteractTap;
            @InteractTap.performed -= instance.OnInteractTap;
            @InteractTap.canceled -= instance.OnInteractTap;
            @BasicSkillDash.started -= instance.OnBasicSkillDash;
            @BasicSkillDash.performed -= instance.OnBasicSkillDash;
            @BasicSkillDash.canceled -= instance.OnBasicSkillDash;
            @BasicSkillGhost.started -= instance.OnBasicSkillGhost;
            @BasicSkillGhost.performed -= instance.OnBasicSkillGhost;
            @BasicSkillGhost.canceled -= instance.OnBasicSkillGhost;
            @GiveHealth.started -= instance.OnGiveHealth;
            @GiveHealth.performed -= instance.OnGiveHealth;
            @GiveHealth.canceled -= instance.OnGiveHealth;
            @ChangeLink.started -= instance.OnChangeLink;
            @ChangeLink.performed -= instance.OnChangeLink;
            @ChangeLink.canceled -= instance.OnChangeLink;
        }

        public void RemoveCallbacks(IInputPlayer2Actions instance)
        {
            if (m_Wrapper.m_InputPlayer2ActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInputPlayer2Actions instance)
        {
            foreach (var item in m_Wrapper.m_InputPlayer2ActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InputPlayer2ActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InputPlayer2Actions @InputPlayer2 => new InputPlayer2Actions(this);

    // Input Main Menu
    private readonly InputActionMap m_InputMainMenu;
    private List<IInputMainMenuActions> m_InputMainMenuActionsCallbackInterfaces = new List<IInputMainMenuActions>();
    private readonly InputAction m_InputMainMenu_Newaction;
    public struct InputMainMenuActions
    {
        private @InputControl m_Wrapper;
        public InputMainMenuActions(@InputControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_InputMainMenu_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_InputMainMenu; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InputMainMenuActions set) { return set.Get(); }
        public void AddCallbacks(IInputMainMenuActions instance)
        {
            if (instance == null || m_Wrapper.m_InputMainMenuActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InputMainMenuActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(IInputMainMenuActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(IInputMainMenuActions instance)
        {
            if (m_Wrapper.m_InputMainMenuActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInputMainMenuActions instance)
        {
            foreach (var item in m_Wrapper.m_InputMainMenuActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InputMainMenuActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InputMainMenuActions @InputMainMenu => new InputMainMenuActions(this);

    // Input Select Level
    private readonly InputActionMap m_InputSelectLevel;
    private List<IInputSelectLevelActions> m_InputSelectLevelActionsCallbackInterfaces = new List<IInputSelectLevelActions>();
    private readonly InputAction m_InputSelectLevel_Newaction;
    public struct InputSelectLevelActions
    {
        private @InputControl m_Wrapper;
        public InputSelectLevelActions(@InputControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_InputSelectLevel_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_InputSelectLevel; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InputSelectLevelActions set) { return set.Get(); }
        public void AddCallbacks(IInputSelectLevelActions instance)
        {
            if (instance == null || m_Wrapper.m_InputSelectLevelActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InputSelectLevelActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(IInputSelectLevelActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(IInputSelectLevelActions instance)
        {
            if (m_Wrapper.m_InputSelectLevelActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInputSelectLevelActions instance)
        {
            foreach (var item in m_Wrapper.m_InputSelectLevelActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InputSelectLevelActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InputSelectLevelActions @InputSelectLevel => new InputSelectLevelActions(this);

    // Input Select Player
    private readonly InputActionMap m_InputSelectPlayer;
    private List<IInputSelectPlayerActions> m_InputSelectPlayerActionsCallbackInterfaces = new List<IInputSelectPlayerActions>();
    private readonly InputAction m_InputSelectPlayer_Newaction;
    public struct InputSelectPlayerActions
    {
        private @InputControl m_Wrapper;
        public InputSelectPlayerActions(@InputControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_InputSelectPlayer_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_InputSelectPlayer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InputSelectPlayerActions set) { return set.Get(); }
        public void AddCallbacks(IInputSelectPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_InputSelectPlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InputSelectPlayerActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(IInputSelectPlayerActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(IInputSelectPlayerActions instance)
        {
            if (m_Wrapper.m_InputSelectPlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInputSelectPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_InputSelectPlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InputSelectPlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InputSelectPlayerActions @InputSelectPlayer => new InputSelectPlayerActions(this);

    // Input Game Pause
    private readonly InputActionMap m_InputGamePause;
    private List<IInputGamePauseActions> m_InputGamePauseActionsCallbackInterfaces = new List<IInputGamePauseActions>();
    private readonly InputAction m_InputGamePause_Newaction;
    public struct InputGamePauseActions
    {
        private @InputControl m_Wrapper;
        public InputGamePauseActions(@InputControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_InputGamePause_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_InputGamePause; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InputGamePauseActions set) { return set.Get(); }
        public void AddCallbacks(IInputGamePauseActions instance)
        {
            if (instance == null || m_Wrapper.m_InputGamePauseActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InputGamePauseActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(IInputGamePauseActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(IInputGamePauseActions instance)
        {
            if (m_Wrapper.m_InputGamePauseActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInputGamePauseActions instance)
        {
            foreach (var item in m_Wrapper.m_InputGamePauseActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InputGamePauseActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InputGamePauseActions @InputGamePause => new InputGamePauseActions(this);

    // Input Game Finish
    private readonly InputActionMap m_InputGameFinish;
    private List<IInputGameFinishActions> m_InputGameFinishActionsCallbackInterfaces = new List<IInputGameFinishActions>();
    private readonly InputAction m_InputGameFinish_Newaction;
    public struct InputGameFinishActions
    {
        private @InputControl m_Wrapper;
        public InputGameFinishActions(@InputControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_InputGameFinish_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_InputGameFinish; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InputGameFinishActions set) { return set.Get(); }
        public void AddCallbacks(IInputGameFinishActions instance)
        {
            if (instance == null || m_Wrapper.m_InputGameFinishActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InputGameFinishActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(IInputGameFinishActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(IInputGameFinishActions instance)
        {
            if (m_Wrapper.m_InputGameFinishActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInputGameFinishActions instance)
        {
            foreach (var item in m_Wrapper.m_InputGameFinishActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InputGameFinishActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InputGameFinishActions @InputGameFinish => new InputGameFinishActions(this);
    private int m_KeyboardSchemeSchemeIndex = -1;
    public InputControlScheme KeyboardSchemeScheme
    {
        get
        {
            if (m_KeyboardSchemeSchemeIndex == -1) m_KeyboardSchemeSchemeIndex = asset.FindControlSchemeIndex("Keyboard Scheme");
            return asset.controlSchemes[m_KeyboardSchemeSchemeIndex];
        }
    }
    private int m_GamepadSchemeSchemeIndex = -1;
    public InputControlScheme GamepadSchemeScheme
    {
        get
        {
            if (m_GamepadSchemeSchemeIndex == -1) m_GamepadSchemeSchemeIndex = asset.FindControlSchemeIndex("Gamepad Scheme");
            return asset.controlSchemes[m_GamepadSchemeSchemeIndex];
        }
    }
    private int m_MouseSchemeSchemeIndex = -1;
    public InputControlScheme MouseSchemeScheme
    {
        get
        {
            if (m_MouseSchemeSchemeIndex == -1) m_MouseSchemeSchemeIndex = asset.FindControlSchemeIndex("Mouse Scheme");
            return asset.controlSchemes[m_MouseSchemeSchemeIndex];
        }
    }
    public interface IInputPlayer1Actions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnInteractPress(InputAction.CallbackContext context);
        void OnInteractTap(InputAction.CallbackContext context);
        void OnInteractHold(InputAction.CallbackContext context);
        void OnGiveHealth(InputAction.CallbackContext context);
        void OnBasicSkillDash(InputAction.CallbackContext context);
        void OnBasicSkillGhost(InputAction.CallbackContext context);
        void OnChangeLink(InputAction.CallbackContext context);
    }
    public interface IInputPlayer2Actions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnInteractPress(InputAction.CallbackContext context);
        void OnInteractHold(InputAction.CallbackContext context);
        void OnInteractTap(InputAction.CallbackContext context);
        void OnBasicSkillDash(InputAction.CallbackContext context);
        void OnBasicSkillGhost(InputAction.CallbackContext context);
        void OnGiveHealth(InputAction.CallbackContext context);
        void OnChangeLink(InputAction.CallbackContext context);
    }
    public interface IInputMainMenuActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
    public interface IInputSelectLevelActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
    public interface IInputSelectPlayerActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
    public interface IInputGamePauseActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
    public interface IInputGameFinishActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
}
