//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Input Action/Input Select Level.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputSelectLevel: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputSelectLevel()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Input Select Level"",
    ""maps"": [
        {
            ""name"": ""Select Level"",
            ""id"": ""d761004a-062e-4beb-87b5-ab75ff7df902"",
            ""actions"": [
                {
                    ""name"": ""Navigation Confirm"",
                    ""type"": ""Button"",
                    ""id"": ""8cd39ba6-b090-41b9-bee7-499f94c0a54f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Navigation Left"",
                    ""type"": ""Button"",
                    ""id"": ""952b1642-f96d-4694-8fce-5fc26e1958b8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Navigation Right"",
                    ""type"": ""Button"",
                    ""id"": ""5a8152a1-5c4c-4190-98da-f75e078f075d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Navigation Back"",
                    ""type"": ""Button"",
                    ""id"": ""7765efd4-c48e-4dc7-8811-ecd42651b5be"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2aef31bb-2e84-4542-aa53-592393c8ca1c"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Select Level scheme"",
                    ""action"": ""Navigation Confirm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cfa2c357-ecd7-42ac-b528-a54cc9e79734"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Select Level scheme"",
                    ""action"": ""Navigation Confirm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2b864df9-af7a-4c44-990d-92d4d7f2f321"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Select Level scheme"",
                    ""action"": ""Navigation Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b99bb449-a9f1-408f-9408-5b150053ff08"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Select Level scheme"",
                    ""action"": ""Navigation Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""620e4455-0af8-4616-8d8f-f50627a23b59"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Select Level scheme"",
                    ""action"": ""Navigation Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6e3f00c3-cc72-4348-8914-d7a618f68575"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Select Level scheme"",
                    ""action"": ""Navigation Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8afc09d0-7b53-4230-9313-364795610574"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Select Level scheme"",
                    ""action"": ""Navigation Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""47e14c30-ca35-40d8-a540-114364a7af4b"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Select Level scheme"",
                    ""action"": ""Navigation Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7d51d469-7116-4691-81df-f953dab38ef1"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Select Level scheme"",
                    ""action"": ""Navigation Back"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""57f89ce9-f1ea-4db3-b0a5-37cf6df610eb"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Select Level scheme"",
                    ""action"": ""Navigation Back"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Select Level scheme"",
            ""bindingGroup"": ""Select Level scheme"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": true,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Select Level
        m_SelectLevel = asset.FindActionMap("Select Level", throwIfNotFound: true);
        m_SelectLevel_NavigationConfirm = m_SelectLevel.FindAction("Navigation Confirm", throwIfNotFound: true);
        m_SelectLevel_NavigationLeft = m_SelectLevel.FindAction("Navigation Left", throwIfNotFound: true);
        m_SelectLevel_NavigationRight = m_SelectLevel.FindAction("Navigation Right", throwIfNotFound: true);
        m_SelectLevel_NavigationBack = m_SelectLevel.FindAction("Navigation Back", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Select Level
    private readonly InputActionMap m_SelectLevel;
    private List<ISelectLevelActions> m_SelectLevelActionsCallbackInterfaces = new List<ISelectLevelActions>();
    private readonly InputAction m_SelectLevel_NavigationConfirm;
    private readonly InputAction m_SelectLevel_NavigationLeft;
    private readonly InputAction m_SelectLevel_NavigationRight;
    private readonly InputAction m_SelectLevel_NavigationBack;
    public struct SelectLevelActions
    {
        private @InputSelectLevel m_Wrapper;
        public SelectLevelActions(@InputSelectLevel wrapper) { m_Wrapper = wrapper; }
        public InputAction @NavigationConfirm => m_Wrapper.m_SelectLevel_NavigationConfirm;
        public InputAction @NavigationLeft => m_Wrapper.m_SelectLevel_NavigationLeft;
        public InputAction @NavigationRight => m_Wrapper.m_SelectLevel_NavigationRight;
        public InputAction @NavigationBack => m_Wrapper.m_SelectLevel_NavigationBack;
        public InputActionMap Get() { return m_Wrapper.m_SelectLevel; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SelectLevelActions set) { return set.Get(); }
        public void AddCallbacks(ISelectLevelActions instance)
        {
            if (instance == null || m_Wrapper.m_SelectLevelActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SelectLevelActionsCallbackInterfaces.Add(instance);
            @NavigationConfirm.started += instance.OnNavigationConfirm;
            @NavigationConfirm.performed += instance.OnNavigationConfirm;
            @NavigationConfirm.canceled += instance.OnNavigationConfirm;
            @NavigationLeft.started += instance.OnNavigationLeft;
            @NavigationLeft.performed += instance.OnNavigationLeft;
            @NavigationLeft.canceled += instance.OnNavigationLeft;
            @NavigationRight.started += instance.OnNavigationRight;
            @NavigationRight.performed += instance.OnNavigationRight;
            @NavigationRight.canceled += instance.OnNavigationRight;
            @NavigationBack.started += instance.OnNavigationBack;
            @NavigationBack.performed += instance.OnNavigationBack;
            @NavigationBack.canceled += instance.OnNavigationBack;
        }

        private void UnregisterCallbacks(ISelectLevelActions instance)
        {
            @NavigationConfirm.started -= instance.OnNavigationConfirm;
            @NavigationConfirm.performed -= instance.OnNavigationConfirm;
            @NavigationConfirm.canceled -= instance.OnNavigationConfirm;
            @NavigationLeft.started -= instance.OnNavigationLeft;
            @NavigationLeft.performed -= instance.OnNavigationLeft;
            @NavigationLeft.canceled -= instance.OnNavigationLeft;
            @NavigationRight.started -= instance.OnNavigationRight;
            @NavigationRight.performed -= instance.OnNavigationRight;
            @NavigationRight.canceled -= instance.OnNavigationRight;
            @NavigationBack.started -= instance.OnNavigationBack;
            @NavigationBack.performed -= instance.OnNavigationBack;
            @NavigationBack.canceled -= instance.OnNavigationBack;
        }

        public void RemoveCallbacks(ISelectLevelActions instance)
        {
            if (m_Wrapper.m_SelectLevelActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISelectLevelActions instance)
        {
            foreach (var item in m_Wrapper.m_SelectLevelActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SelectLevelActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SelectLevelActions @SelectLevel => new SelectLevelActions(this);
    private int m_SelectLevelschemeSchemeIndex = -1;
    public InputControlScheme SelectLevelschemeScheme
    {
        get
        {
            if (m_SelectLevelschemeSchemeIndex == -1) m_SelectLevelschemeSchemeIndex = asset.FindControlSchemeIndex("Select Level scheme");
            return asset.controlSchemes[m_SelectLevelschemeSchemeIndex];
        }
    }
    public interface ISelectLevelActions
    {
        void OnNavigationConfirm(InputAction.CallbackContext context);
        void OnNavigationLeft(InputAction.CallbackContext context);
        void OnNavigationRight(InputAction.CallbackContext context);
        void OnNavigationBack(InputAction.CallbackContext context);
    }
}
