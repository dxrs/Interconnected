//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Input Action/Input Select Chapter.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputSelectChapter: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputSelectChapter()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Input Select Chapter"",
    ""maps"": [
        {
            ""name"": ""Select Chapter"",
            ""id"": ""5927d4b0-dc51-4744-9ccd-4104646f6c28"",
            ""actions"": [
                {
                    ""name"": ""Moving Map"",
                    ""type"": ""Value"",
                    ""id"": ""b657bf27-14c1-4986-9a3b-a376b87ce34a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Navigation Confirm"",
                    ""type"": ""Button"",
                    ""id"": ""b0122eba-ed81-4845-bbf9-3e728123be6d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Navigation Back"",
                    ""type"": ""Button"",
                    ""id"": ""9c971d11-c0d8-4cce-a635-d26624ade1c1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""594955d0-ca5d-4e2c-8987-5cb68c3dac69"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Select Chapter scheme"",
                    ""action"": ""Moving Map"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""01c72e44-585d-43d7-ad36-43ac009d6f24"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moving Map"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""34f21389-aec3-49c6-8681-b0ac1af0408e"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Select Chapter scheme"",
                    ""action"": ""Moving Map"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""9918ab62-a4ba-41f6-b7b8-1f5377d12332"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Select Chapter scheme"",
                    ""action"": ""Moving Map"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""00246fc4-1033-4ca5-bc38-430abb42cbcf"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Select Chapter scheme"",
                    ""action"": ""Moving Map"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""20083dd9-1a9d-494f-a7ad-31d2c5698b82"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Select Chapter scheme"",
                    ""action"": ""Moving Map"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""8ac17f4d-feb6-460c-820c-fe2e206a1160"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Select Chapter scheme"",
                    ""action"": ""Navigation Confirm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b2f9b21f-1c8d-48a7-9a00-c6839ce113b6"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Select Chapter scheme"",
                    ""action"": ""Navigation Confirm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0d57c9dd-1692-4ab2-9588-9d490715df0b"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Select Chapter scheme"",
                    ""action"": ""Navigation Back"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""baeb107c-5970-425d-bf09-3d44a625c374"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Select Chapter scheme"",
                    ""action"": ""Navigation Back"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Select Chapter scheme"",
            ""bindingGroup"": ""Select Chapter scheme"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": true,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Select Chapter
        m_SelectChapter = asset.FindActionMap("Select Chapter", throwIfNotFound: true);
        m_SelectChapter_MovingMap = m_SelectChapter.FindAction("Moving Map", throwIfNotFound: true);
        m_SelectChapter_NavigationConfirm = m_SelectChapter.FindAction("Navigation Confirm", throwIfNotFound: true);
        m_SelectChapter_NavigationBack = m_SelectChapter.FindAction("Navigation Back", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Select Chapter
    private readonly InputActionMap m_SelectChapter;
    private List<ISelectChapterActions> m_SelectChapterActionsCallbackInterfaces = new List<ISelectChapterActions>();
    private readonly InputAction m_SelectChapter_MovingMap;
    private readonly InputAction m_SelectChapter_NavigationConfirm;
    private readonly InputAction m_SelectChapter_NavigationBack;
    public struct SelectChapterActions
    {
        private @InputSelectChapter m_Wrapper;
        public SelectChapterActions(@InputSelectChapter wrapper) { m_Wrapper = wrapper; }
        public InputAction @MovingMap => m_Wrapper.m_SelectChapter_MovingMap;
        public InputAction @NavigationConfirm => m_Wrapper.m_SelectChapter_NavigationConfirm;
        public InputAction @NavigationBack => m_Wrapper.m_SelectChapter_NavigationBack;
        public InputActionMap Get() { return m_Wrapper.m_SelectChapter; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SelectChapterActions set) { return set.Get(); }
        public void AddCallbacks(ISelectChapterActions instance)
        {
            if (instance == null || m_Wrapper.m_SelectChapterActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SelectChapterActionsCallbackInterfaces.Add(instance);
            @MovingMap.started += instance.OnMovingMap;
            @MovingMap.performed += instance.OnMovingMap;
            @MovingMap.canceled += instance.OnMovingMap;
            @NavigationConfirm.started += instance.OnNavigationConfirm;
            @NavigationConfirm.performed += instance.OnNavigationConfirm;
            @NavigationConfirm.canceled += instance.OnNavigationConfirm;
            @NavigationBack.started += instance.OnNavigationBack;
            @NavigationBack.performed += instance.OnNavigationBack;
            @NavigationBack.canceled += instance.OnNavigationBack;
        }

        private void UnregisterCallbacks(ISelectChapterActions instance)
        {
            @MovingMap.started -= instance.OnMovingMap;
            @MovingMap.performed -= instance.OnMovingMap;
            @MovingMap.canceled -= instance.OnMovingMap;
            @NavigationConfirm.started -= instance.OnNavigationConfirm;
            @NavigationConfirm.performed -= instance.OnNavigationConfirm;
            @NavigationConfirm.canceled -= instance.OnNavigationConfirm;
            @NavigationBack.started -= instance.OnNavigationBack;
            @NavigationBack.performed -= instance.OnNavigationBack;
            @NavigationBack.canceled -= instance.OnNavigationBack;
        }

        public void RemoveCallbacks(ISelectChapterActions instance)
        {
            if (m_Wrapper.m_SelectChapterActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISelectChapterActions instance)
        {
            foreach (var item in m_Wrapper.m_SelectChapterActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SelectChapterActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SelectChapterActions @SelectChapter => new SelectChapterActions(this);
    private int m_SelectChapterschemeSchemeIndex = -1;
    public InputControlScheme SelectChapterschemeScheme
    {
        get
        {
            if (m_SelectChapterschemeSchemeIndex == -1) m_SelectChapterschemeSchemeIndex = asset.FindControlSchemeIndex("Select Chapter scheme");
            return asset.controlSchemes[m_SelectChapterschemeSchemeIndex];
        }
    }
    public interface ISelectChapterActions
    {
        void OnMovingMap(InputAction.CallbackContext context);
        void OnNavigationConfirm(InputAction.CallbackContext context);
        void OnNavigationBack(InputAction.CallbackContext context);
    }
}
